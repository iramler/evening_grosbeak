plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = 1.3) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = 1) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .1) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "black"
) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey"
) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey",
space = 0.2
) +
geom_alluvial_text(size = 3, color = "black") +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey",
space = 0.2
) +
geom_alluvial_text(size = 3, color = "black", space = 0.2) +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
df
extras <- tibble(
x = rep("StudentEst",3),
node = c(2.5,2.25,2))
extras
dat |>
make_long(StudentEst, RamlerEst) |>
bind_rows(extras)
dat |>
make_long(StudentEst, RamlerEst) |>
bind_rows(extras) |> tail()
df <- dat |>
make_long(StudentEst, RamlerEst) |>
bind_rows(extras)
ggplot(aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node))) +
geom_sankey()
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey",
space = 0.2
) +
geom_alluvial_text(size = 3, color = "black", space = 0.2) +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
View(df)
df <- dat |>
make_long(StudentEst, RamlerEst)
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey",
space = 0.2
) +
geom_alluvial_text(size = 3, color = "black", space = 0.2) +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
dat <- tibble(RamlerEst = c(3,3,3,4,3.75,3,2.25,4,2,4,3.75,3.25,3.25,3,2.5,2, NA, NA, NA)
, StudentEst = c(3.5,3,3,4,3.75,2.75,2.75,4,3.25,4,4,4,3.5,3.25,3.25,3.25, 2.5, 2.25, 2)
)
df <- dat |>
make_long(StudentEst, RamlerEst)
ggplot(df, aes(x = x, next_x = next_x,
node = node, next_node = next_node,
fill = factor(node), label = node)) +
geom_alluvial(flow.alpha = .6,
node.color = "black",
width = .15,
flow.color = "grey",
space = 0.2
) +
geom_alluvial_text(size = 3, color = "black", space = 0.2) +
#  scale_fill_viridis_d() +
theme_alluvial(base_size = 18) +
labs(x = NULL) +
#  scale_x_discrete(limits = c("Student Estimate", "Ramler Estimate"), expand = c(.2, .05)) +
theme(legend.position = "none",
plot.title = element_text(hjust = .5)) +
labs(title = "Grade Estimates (Self vs Ramler)")
View(df)
p = 0.42
n = 1012
sd = sqrt(p*(1-p)/n)
pnorm(p, 0.3333, sd, lower.tail = FALSE)
pnorm(p, 0.4, sd, lower.tail = FALSE)
pnorm(p, 0.33333, sd, lower.tail = FALSE)
p = 0.36
sd = sqrt(p*(1-p)/n)
pnorm(p, 0.33333, sd, lower.tail = FALSE)
p = 0.32
p = 0.32; n = 560
sd = sqrt(p*(1-p)/n)
p + sd*qnorm(c(0.025,0.975))
opl <- read_csv("C:/Users/iramler/Downloads/openpowerlifting-2023-11-04-7967414d.csv")
library(tidyerse)
library(lme4)
library(tidyverse)
opl <- read_csv("C:/Users/iramler/Downloads/openpowerlifting-2023-11-04-7967414d.csv")
dups <- table(opl$Name)
hist(dups)
sort(dups)
table(dups)
library(tidyverse)
library(lme4)
opl <- read_csv("C:/Users/iramler/Downloads/openpowerlifting-2023-11-04-7967414d.csv")
dups <- table(opl$Name)
table(dups)
table(dups) |> as.tibble()
table(dups) |> as.tibble() |> View()
table(dups) |> as.tibble() |> View() |> plot()
table(dups) |> as.tibble() |> View() |> qplot()
table(dups) |> as.tibble() |> plot()
table(dups) |> as.tibble() |> qplot()
table(dups) |> as.tibble() |> qplot(x = dups, y = n)
table(dups) |> as.tibble() |> gplot(aes(x = dups, y = n))
table(dups) |> as.tibble() |> ggplot(aes(x = dups, y = n))
table(dups) |> as.tibble() |> ggplot(aes(x = as.numeric(dups), y = n))
table(dups) |> as.tibble() |>
ggplot(aes(x = as.numeric(dups), y = n)) +
geom_line()
table(dups) |> as.tibble() |>
ggplot(aes(x = as.numeric(dups), y = log(n))) +
geom_line()
cutoff = 5
which(dups >= cutoff)
opl[which(dups >= cutoff),] |> nrow()
cutoff = 10
opl[which(dups >= cutoff),] |> nrow()
cutoff = 5:10
which(dups %in% cutoff)
opl[which(dups %in% cutoff),] |> nrow()
cutoff = 6:10
opl[which(dups %in% cutoff),] |> nrow()
cutoff = 7:10
opl[which(dups %in% cutoff),] |> nrow()
cutoff = 10:1000000
repeat_power <- opl[which(dups %in% cutoff),] |> nrow()
repeat_power
cutoff = 7:10
repeat_power <- opl[which(dups %in% cutoff),]
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + Bodyweight + (Sex | Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + (Sex | Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + (1|Name), data = repeat_power, REML = TRUE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (1|Name), data = repeat_power, REML = TRUE)
summary(mod1)
repeat_power <- opl[which(dups %in% cutoff),] |> filter(Sex != "Mx")
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + (Sex|Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (|Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (Equipment + Age + BodyweightKg|Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (Age|Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (Equipment|Name), data = repeat_power, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (1|Name), data = repeat_power, REML = TRUE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg + Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg*Sex  (1|Name), data = repeat_power, REML = FALSE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg:Sex  (1|Name), data = repeat_power, REML = FALSE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
table(repeat_power$Name, repeat_power$Equipment)
table(repeat_power$Name, repeat_power$Equipment)
table(repeat_power$Name, repeat_power$Equipment) |> sign()
table(repeat_power$Name, repeat_power$Equipment) |> sign() |> rowsum()
table(repeat_power$Name, repeat_power$Equipment) |> sign() |> apply(MARGIN = 1, FUN = sum)
table(repeat_power$Name, repeat_power$Equipment) |> sign() |> apply(MARGIN = 1, FUN = sum) |> table()
table(repeat_power$Name, repeat_power$AgeClass) |> sign() |> apply(MARGIN = 1, FUN = sum) |> table()
table(repeat_power$Name, repeat_power$Age) |> sign() |> apply(MARGIN = 1, FUN = sum) |> table()
table(repeat_power$Name, repeat_power$Equipment)
table(repeat_power$Name, repeat_power$Equipment) |> as.matrix()
tmp <- table(repeat_power$Name, repeat_power$Equipment) |> as.matrix()
t(tmp)%*% tmp()
t(tmp)%*% tmp
repeat_power <- opl[which(dups %in% cutoff),] |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply"))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + poly(Age,2) + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
tmp <- table(repeat_power$Name, repeat_power$AgeClass) |> as.matrix()
t(tmp)%*% tmp
repeat_power <- opl[which(dups %in% cutoff),] |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 20, 49))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + Age + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + poly(Age,2) + BodyweightKg*Sex + (1|Name), data = repeat_power, REML = FALSE)
summary(mod1)
table(repeat_power$Name, repeat_power$Age) |> sign() |> apply(MARGIN = 1, FUN = sum) |> table()
tmp <- table(repeat_power$Name, repeat_power$Age) |> as.matrix()
t(tmp)%*% tmp
tmp <- table(repeat_power$Name, repeat_power$AgeClass) |> as.matrix()
t(tmp)%*% tmp
library(tidyverse)
library(lubridate)
year(opl$Date[1:10])
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2015) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 20, 49))
people <- repeat_power %>% group_by(Name) |> tally()
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 20, 49))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + poly(Age,2) + BodyweightKg*Sex + (1|Name), data = opl_to_use, REML = FALSE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (1|Name), data = opl_to_use, REML = FALSE)
summary(mod1)
table(opl_to_use$Name, opl_to_use$AgeClass) |> sign() |> apply(MARGIN = 1, FUN = sum) |> table()
tmp <- table(opl_to_use$Name, opl_to_use$AgeClass) |> as.matrix()
t(tmp)%*% tmp
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (1|Name), data = opl_to_use, REML = FALSE)
tmp <- table(opl_to_use$Name, opl_to_use$AgeClass) |> as.matrix()
t(tmp)%*% tmp
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (1|Name), data = opl_to_use, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (Equipment|Name), data = opl_to_use, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (Bodyweight + Equipment|Name), data = opl_to_use, REML = FALSE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (BodyweightKg + Equipment|Name), data = opl_to_use, REML = FALSE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (BodyweightKg + Equipment|Name), data = opl_to_use, REML = TRUE)
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5)) |>
mutate(cBdyWgt = BodyweightKg - mean(BodyweightKg))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + BodyweightKg*Sex + (BodyweightKg + Equipment|Name), data = opl_to_use, REML = TRUE)
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + cBdyWgt*Sex + (cBdyWgt + Equipment|Name), data = opl_to_use, REML = TRUE)
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5)) |>
mutate(cBdyWgt = BodyweightKg - mean(BodyweightKg, na.rm = TRUE))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
mod1 <- lmer(Best3DeadliftKg ~ Equipment + AgeClass + cBdyWgt*Sex +
(cBdyWgt + Equipment|Name),
data = opl_to_use, REML = TRUE)
summary(mod1)
mod1 <- lmer(Best3DeadliftKg ~ Best3SquatKg + Equipment + AgeClass + cBdyWgt*Sex +
(Best3SquatKg + cBdyWgt + Equipment|Name),
data = opl_to_use, REML = TRUE)
summary(mod1)
help('isSingular')
#cutoff = 7:100000
repeat_power <- opl |>
drop_na() |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5)) |>
mutate(cBdyWgt = BodyweightKg - mean(BodyweightKg, na.rm = TRUE))
#cutoff = 7:100000
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5)) |>
mutate(cBdyWgt = BodyweightKg - mean(BodyweightKg, na.rm = TRUE))
repeat_power <- opl |>
filter(year(Date) >= 2020) |>
filter(Sex != "Mx") |>
filter(Equipment %in% c("Raw","Single-ply")) |>
filter(between(Age, 24, 34.5) | between(Age, 40,44.5))
people <- repeat_power %>% group_by(Name) |> tally() |> filter(between(n, 5, 10))
opl_to_use <- semi_join(repeat_power, people, by = join_by(Name))
write_csv(opl_to_use, file = "powerlifting_313.csv")
getwd()
library(readxl)
Lara_Kassab <- read_excel("C:/Users/iramler/Downloads/Student Feedback - Lara Kassab (Responses).xlsx")
View(Lara_Kassab)
library(tidyverse)
names(Lara_Kassab)
names(Lara_Kassab)[3] = "Instructors"
Lara_Kassab |>
filter(Instructors |>
str_to_lower() |>
str_detect(pattern = "chapman") )
Lara_Kassab |>
filter(Instructors |>
str_to_lower() |>
str_detect(pattern = "chapman") ) |>
write_csv("kassab_chapman.csv")
getwd()
hist(Lara_Kassab$`On a scale of 1 - 5, how interested would you be in taking a class from the candidate?`)
barchart(Lara_Kassab$`On a scale of 1 - 5, how interested would you be in taking a class from the candidate?`)
barplot(Lara_Kassab$`On a scale of 1 - 5, how interested would you be in taking a class from the candidate?`)
qplot(Lara_Kassab$`On a scale of 1 - 5, how interested would you be in taking a class from the candidate?`)
names(Lara_Kassab)[5] = "Rating"
Lara_Kassab |>
ggplot(aes(x = rating)) +
geom_bar()
Lara_Kassab |>
ggplot(aes(x = Rating)) +
geom_bar()
Lara_Kassab |>
ggplot(aes(x = Rating)) +
geom_bar(position = "fill")
pl <- ggplot(data = Lara_Kassab, aes(x = Rating,
y = after_stat(count/sum(count)))) +
geom_bar() +
theme_classic() +
scale_y_continuous(labels = percent)
pl <- ggplot(data = Lara_Kassab, aes(x = Rating,
y = after_stat(count/sum(count)))) +
geom_bar() +
theme_classic() +
scales::scale_y_continuous(labels = percent)
library(scales)
pl <- ggplot(data = Lara_Kassab, aes(x = Rating,
y = after_stat(count/sum(count)))) +
geom_bar() +
theme_classic() +
scale_y_continuous(labels = percent)
pl
pl <- ggplot(data = Lara_Kassab, aes(x = Rating,
y = after_stat(count/sum(count)))) +
geom_bar() +
theme_classic() +
scale_y_continuous(labels = percent) +
labs(y = "Percent")
pl
23000/24
958.333/3831.38
383.14+229.88
3831.38*.01
3831.38*.06
3831.38*.01
613.02-38.31
958.33-574.71
958.33-383.14
575.19+383.14
setwd("~/GitHub/evening_grosbeak/code")
library(motus)
install.packages("motus")
library(remotes)
### install needed packages
install.packages(c("motus", "motusData"),
repos = c(birdscanada = 'https://birdscanada.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
library(motus)
install.packages("motus",
repos = c(birdscanada = 'https://birdscanada.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
install.packages("maptools")
library(remotes)
update_packages()
url <- "https://cran.r-project.org/src/contrib/Archive/maptools/maptools_1.1-8.tar.gz"
pkgFile <- "maptools_1.1-8.tar.gz"
download.file(url = url, destfile = pkgFile)
install.packages(pkgs=pkgFile, type="source", repos=NULL)
remotes::install_github("motusWTS/motus@beta3")
7*8
7/39
